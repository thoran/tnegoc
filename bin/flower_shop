#!/usr/bin/env ruby
# flower_shop

# 0.0.13
# 20160927

BUNDLE_DEFINITIONS = {
  'R12' => {10 => 12.99, 5 => 6.99},
  'L09' => {9 => 24.95, 6 => 16.95, 3 => 9.95},
  'T58' => {9 => 16.99, 5 => 9.95, 3 => 5.95},
}

def bundler(dividend, bundle_definition, bundles)
  divisor = bundle_definition.keys.max
  if dividend.zero?
    return bundles
  elsif dividend >= divisor
    new_bundle_definition = bundle_definition.dup
    new_bundle_definition.delete(divisor)
    quotient, remainder = dividend.divmod(divisor)
    if return_value = bundler(remainder, new_bundle_definition, bundles)
      bundles[divisor] = quotient
    else
      return_value = bundler(dividend, new_bundle_definition, bundles)
    end
    return return_value
  else
    return
  end
end

def order_processor(order, bundle_definitions)
  order.collect do |line_item|
    quantity, code = line_item.split
    quantity = quantity.to_i
    {code => bundler(quantity, bundle_definitions[code], {})}
  end
end

def main(bundle_definitions)
  order = []
  until (input = gets) == "\n"
    order << input.chomp
  end
  p order_processor(order, bundle_definitions)
end

main(BUNDLE_DEFINITIONS)
