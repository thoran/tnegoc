#!/usr/bin/env ruby
# flower_shop

# 0.3.0
# 20160927

def read_order
  order = []
  if ARGV[1] && File.exist?(ARGV[1])
    File.read(ARGV[1]).split("\n").each do |line|
      order << line
    end
  end
  order
end

def read_bundle_definitions
  if ARGV[0] && File.exist?(ARGV[0])
    instance_eval(File.read(ARGV[0]))
  end
end

def bundler(dividend, bundle_definition, bundles)
  divisor = bundle_definition.keys.max
  if dividend.zero?
    return bundles
  elsif dividend >= divisor
    new_bundle_definition = bundle_definition.dup
    new_bundle_definition.delete(divisor)
    quotient, remainder = dividend.divmod(divisor)
    bundles[divisor] = quotient
    return_value = bundler(remainder, new_bundle_definition, bundles)
    if return_value.nil?
      bundles.delete(divisor)
      return_value = bundler(dividend, new_bundle_definition, bundles)
    end
    return return_value
  else
    return
  end
end

def order_processor(order, bundle_definitions)
  order.collect do |line_item|
    quantity, code = line_item.split
    {quantity: quantity, code: code, bundles: bundler(quantity.to_i, bundle_definitions[code], {})}
  end
end

def output_delivery_docket(processed_order, bundle_definitions)
  processed_order.each do |line_item|
    total_cost = line_item[:bundles].inject(0){|total, bundle| total += bundle_definitions[line_item[:code]][bundle.first] * bundle.last}
    puts "#{line_item[:quantity]} #{line_item[:code]} $#{format('%.2f', total_cost)}"
    line_item[:bundles].each do |bundle|
      print ' ' * 6
      bundle_cost = bundle_definitions[line_item[:code]][bundle.first] * bundle.last
      puts "#{bundle.last} x #{bundle.first} $#{format('%.2f', bundle_cost)}"
    end
  end
end

def main
  order = read_order
  bundle_definitions = read_bundle_definitions
  processed_order = order_processor(order, bundle_definitions)
  output_delivery_docket(processed_order, bundle_definitions)
end

main
