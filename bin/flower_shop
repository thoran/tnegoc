#!/usr/bin/env ruby
# flower_shop

# 0.1.3
# 20160927

BUNDLE_DEFINITIONS = {
  'R12' => {10 => 12.99, 5 => 6.99},
  'L09' => {9 => 24.95, 6 => 16.95, 3 => 9.95},
  'T58' => {9 => 16.99, 5 => 9.95, 3 => 5.95},
}

def bundler(dividend, bundle_definition, bundles)
  divisor = bundle_definition.keys.max
  if dividend.zero?
    return bundles
  elsif dividend >= divisor
    new_bundle_definition = bundle_definition.dup
    new_bundle_definition.delete(divisor)
    quotient, remainder = dividend.divmod(divisor)
    bundles[divisor] = quotient
    return_value = bundler(remainder, new_bundle_definition, bundles)
    if return_value.nil?
      bundles.delete(divisor)
      return_value = bundler(dividend, new_bundle_definition, bundles)
    end
    return return_value
  else
    return
  end
end

def order_processor(order, bundle_definitions)
  order.collect do |line_item|
    quantity, code = line_item.split
    {quantity: quantity, code: code, bundles: bundler(quantity.to_i, bundle_definitions[code], {})}
  end
end

def output_delivery(processed_order, bundle_definitions)
  processed_order.each do |line_item|
    total_cost = line_item[:bundles].inject(0){|total, bundle| total += bundle_definitions[line_item[:code]][bundle.first] * bundle.last}
    puts "#{line_item[:quantity]} #{line_item[:code]} $#{format('%.2f', total_cost)}"
    line_item[:bundles].each do |bundle|
      print ' ' * 6
      bundle_cost = bundle_definitions[line_item[:code]][bundle.first] * bundle.last
      puts "#{bundle.last} x #{bundle.first} $#{format('%.2f', bundle_cost)}"
    end
  end
end

def main(bundle_definitions)
  order = []
  until (input = gets) == "\n"
    order << input.chomp
  end
  processed_order = order_processor(order, bundle_definitions)
  output_delivery(processed_order, bundle_definitions)
end

main(BUNDLE_DEFINITIONS)
