#!/usr/bin/env ruby
# flower_shop

# 0.0.8
# 20160926

BUNDLE_DEFINITIONS = {
  'R12' => {10 => 12.99, 5 => 6.99},
  'L09' => {9 => 24.95, 6 => 16.95, 3 => 9.95},
  'T58' => {9 => 16.99, 5 => 9.95, 3 => 5.95},
}

def bundler(quantity, bundle_definition, bundles)
  divisor = bundle_definition.keys.max
  new_bundle_definition = bundle_definition.dup
  new_bundle_definition.delete(divisor)
  if quantity.zero?
    return bundles
  elsif quantity >= divisor
    result, remainder = quantity.divmod(divisor)
    bundles[divisor] = result
    return_value = bundler(remainder, new_bundle_definition, bundles)
    if return_value.nil?
      bundles.delete(divisor)
      return_value = bundler(quantity, new_bundle_definition, bundles)
    end
    return return_value
  else
    return
  end
end

def order_maker(order)
  order.each do |line_item|
    quantity, code = line_item.split
    quantity = quantity.to_i
    p bundles = bundler(quantity, BUNDLE_DEFINITIONS[code].dup, {})
  end
end

def main
  order = []
  until (input = gets) == "\n"
    order << input.strip
  end
  order_maker(order)
end

main
